// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: refund/refund.proto

package kaspiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RefundService_CreateRefundQR_FullMethodName        = "/kaspi.api.v1.RefundService/CreateRefundQR"
	RefundService_GetRefundStatus_FullMethodName       = "/kaspi.api.v1.RefundService/GetRefundStatus"
	RefundService_GetCustomerOperations_FullMethodName = "/kaspi.api.v1.RefundService/GetCustomerOperations"
	RefundService_GetPaymentDetails_FullMethodName     = "/kaspi.api.v1.RefundService/GetPaymentDetails"
	RefundService_RefundPayment_FullMethodName         = "/kaspi.api.v1.RefundService/RefundPayment"
)

// RefundServiceClient is the client API for RefundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RefundServiceClient interface {
	CreateRefundQR(ctx context.Context, in *CreateRefundQRRequest, opts ...grpc.CallOption) (*CreateRefundQRResponse, error)
	GetRefundStatus(ctx context.Context, in *GetRefundStatusRequest, opts ...grpc.CallOption) (*GetRefundStatusResponse, error)
	GetCustomerOperations(ctx context.Context, in *GetCustomerOperationsRequest, opts ...grpc.CallOption) (*GetCustomerOperationsResponse, error)
	GetPaymentDetails(ctx context.Context, in *GetPaymentDetailsRequest, opts ...grpc.CallOption) (*GetPaymentDetailsResponse, error)
	RefundPayment(ctx context.Context, in *RefundPaymentRequest, opts ...grpc.CallOption) (*RefundPaymentResponse, error)
}

type refundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRefundServiceClient(cc grpc.ClientConnInterface) RefundServiceClient {
	return &refundServiceClient{cc}
}

func (c *refundServiceClient) CreateRefundQR(ctx context.Context, in *CreateRefundQRRequest, opts ...grpc.CallOption) (*CreateRefundQRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRefundQRResponse)
	err := c.cc.Invoke(ctx, RefundService_CreateRefundQR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundServiceClient) GetRefundStatus(ctx context.Context, in *GetRefundStatusRequest, opts ...grpc.CallOption) (*GetRefundStatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRefundStatusResponse)
	err := c.cc.Invoke(ctx, RefundService_GetRefundStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundServiceClient) GetCustomerOperations(ctx context.Context, in *GetCustomerOperationsRequest, opts ...grpc.CallOption) (*GetCustomerOperationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetCustomerOperationsResponse)
	err := c.cc.Invoke(ctx, RefundService_GetCustomerOperations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundServiceClient) GetPaymentDetails(ctx context.Context, in *GetPaymentDetailsRequest, opts ...grpc.CallOption) (*GetPaymentDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetPaymentDetailsResponse)
	err := c.cc.Invoke(ctx, RefundService_GetPaymentDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *refundServiceClient) RefundPayment(ctx context.Context, in *RefundPaymentRequest, opts ...grpc.CallOption) (*RefundPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundPaymentResponse)
	err := c.cc.Invoke(ctx, RefundService_RefundPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RefundServiceServer is the server API for RefundService service.
// All implementations must embed UnimplementedRefundServiceServer
// for forward compatibility.
type RefundServiceServer interface {
	CreateRefundQR(context.Context, *CreateRefundQRRequest) (*CreateRefundQRResponse, error)
	GetRefundStatus(context.Context, *GetRefundStatusRequest) (*GetRefundStatusResponse, error)
	GetCustomerOperations(context.Context, *GetCustomerOperationsRequest) (*GetCustomerOperationsResponse, error)
	GetPaymentDetails(context.Context, *GetPaymentDetailsRequest) (*GetPaymentDetailsResponse, error)
	RefundPayment(context.Context, *RefundPaymentRequest) (*RefundPaymentResponse, error)
	mustEmbedUnimplementedRefundServiceServer()
}

// UnimplementedRefundServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRefundServiceServer struct{}

func (UnimplementedRefundServiceServer) CreateRefundQR(context.Context, *CreateRefundQRRequest) (*CreateRefundQRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRefundQR not implemented")
}
func (UnimplementedRefundServiceServer) GetRefundStatus(context.Context, *GetRefundStatusRequest) (*GetRefundStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRefundStatus not implemented")
}
func (UnimplementedRefundServiceServer) GetCustomerOperations(context.Context, *GetCustomerOperationsRequest) (*GetCustomerOperationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCustomerOperations not implemented")
}
func (UnimplementedRefundServiceServer) GetPaymentDetails(context.Context, *GetPaymentDetailsRequest) (*GetPaymentDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPaymentDetails not implemented")
}
func (UnimplementedRefundServiceServer) RefundPayment(context.Context, *RefundPaymentRequest) (*RefundPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundPayment not implemented")
}
func (UnimplementedRefundServiceServer) mustEmbedUnimplementedRefundServiceServer() {}
func (UnimplementedRefundServiceServer) testEmbeddedByValue()                       {}

// UnsafeRefundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RefundServiceServer will
// result in compilation errors.
type UnsafeRefundServiceServer interface {
	mustEmbedUnimplementedRefundServiceServer()
}

func RegisterRefundServiceServer(s grpc.ServiceRegistrar, srv RefundServiceServer) {
	// If the following call pancis, it indicates UnimplementedRefundServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RefundService_ServiceDesc, srv)
}

func _RefundService_CreateRefundQR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRefundQRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServiceServer).CreateRefundQR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundService_CreateRefundQR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServiceServer).CreateRefundQR(ctx, req.(*CreateRefundQRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundService_GetRefundStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRefundStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServiceServer).GetRefundStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundService_GetRefundStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServiceServer).GetRefundStatus(ctx, req.(*GetRefundStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundService_GetCustomerOperations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCustomerOperationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServiceServer).GetCustomerOperations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundService_GetCustomerOperations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServiceServer).GetCustomerOperations(ctx, req.(*GetCustomerOperationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundService_GetPaymentDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServiceServer).GetPaymentDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundService_GetPaymentDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServiceServer).GetPaymentDetails(ctx, req.(*GetPaymentDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RefundService_RefundPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RefundServiceServer).RefundPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RefundService_RefundPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RefundServiceServer).RefundPayment(ctx, req.(*RefundPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RefundService_ServiceDesc is the grpc.ServiceDesc for RefundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RefundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaspi.api.v1.RefundService",
	HandlerType: (*RefundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRefundQR",
			Handler:    _RefundService_CreateRefundQR_Handler,
		},
		{
			MethodName: "GetRefundStatus",
			Handler:    _RefundService_GetRefundStatus_Handler,
		},
		{
			MethodName: "GetCustomerOperations",
			Handler:    _RefundService_GetCustomerOperations_Handler,
		},
		{
			MethodName: "GetPaymentDetails",
			Handler:    _RefundService_GetPaymentDetails_Handler,
		},
		{
			MethodName: "RefundPayment",
			Handler:    _RefundService_RefundPayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "refund/refund.proto",
}
