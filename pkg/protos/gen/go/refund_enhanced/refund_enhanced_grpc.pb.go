// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: refund_enhanced/refund_enhanced.proto

package kaspiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	EnhancedRefundService_RefundPaymentEnhanced_FullMethodName = "/kaspi.api.v1.EnhancedRefundService/RefundPaymentEnhanced"
	EnhancedRefundService_GetClientInfo_FullMethodName         = "/kaspi.api.v1.EnhancedRefundService/GetClientInfo"
	EnhancedRefundService_CreateRemotePayment_FullMethodName   = "/kaspi.api.v1.EnhancedRefundService/CreateRemotePayment"
	EnhancedRefundService_CancelRemotePayment_FullMethodName   = "/kaspi.api.v1.EnhancedRefundService/CancelRemotePayment"
)

// EnhancedRefundServiceClient is the client API for EnhancedRefundService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EnhancedRefundServiceClient interface {
	RefundPaymentEnhanced(ctx context.Context, in *RefundPaymentEnhancedRequest, opts ...grpc.CallOption) (*RefundPaymentResponse, error)
	GetClientInfo(ctx context.Context, in *GetClientInfoRequest, opts ...grpc.CallOption) (*GetClientInfoResponse, error)
	CreateRemotePayment(ctx context.Context, in *CreateRemotePaymentRequest, opts ...grpc.CallOption) (*CreateRemotePaymentResponse, error)
	CancelRemotePayment(ctx context.Context, in *CancelRemotePaymentRequest, opts ...grpc.CallOption) (*CancelRemotePaymentResponse, error)
}

type enhancedRefundServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEnhancedRefundServiceClient(cc grpc.ClientConnInterface) EnhancedRefundServiceClient {
	return &enhancedRefundServiceClient{cc}
}

func (c *enhancedRefundServiceClient) RefundPaymentEnhanced(ctx context.Context, in *RefundPaymentEnhancedRequest, opts ...grpc.CallOption) (*RefundPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RefundPaymentResponse)
	err := c.cc.Invoke(ctx, EnhancedRefundService_RefundPaymentEnhanced_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRefundServiceClient) GetClientInfo(ctx context.Context, in *GetClientInfoRequest, opts ...grpc.CallOption) (*GetClientInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClientInfoResponse)
	err := c.cc.Invoke(ctx, EnhancedRefundService_GetClientInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRefundServiceClient) CreateRemotePayment(ctx context.Context, in *CreateRemotePaymentRequest, opts ...grpc.CallOption) (*CreateRemotePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateRemotePaymentResponse)
	err := c.cc.Invoke(ctx, EnhancedRefundService_CreateRemotePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *enhancedRefundServiceClient) CancelRemotePayment(ctx context.Context, in *CancelRemotePaymentRequest, opts ...grpc.CallOption) (*CancelRemotePaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CancelRemotePaymentResponse)
	err := c.cc.Invoke(ctx, EnhancedRefundService_CancelRemotePayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EnhancedRefundServiceServer is the server API for EnhancedRefundService service.
// All implementations must embed UnimplementedEnhancedRefundServiceServer
// for forward compatibility.
type EnhancedRefundServiceServer interface {
	RefundPaymentEnhanced(context.Context, *RefundPaymentEnhancedRequest) (*RefundPaymentResponse, error)
	GetClientInfo(context.Context, *GetClientInfoRequest) (*GetClientInfoResponse, error)
	CreateRemotePayment(context.Context, *CreateRemotePaymentRequest) (*CreateRemotePaymentResponse, error)
	CancelRemotePayment(context.Context, *CancelRemotePaymentRequest) (*CancelRemotePaymentResponse, error)
	mustEmbedUnimplementedEnhancedRefundServiceServer()
}

// UnimplementedEnhancedRefundServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedEnhancedRefundServiceServer struct{}

func (UnimplementedEnhancedRefundServiceServer) RefundPaymentEnhanced(context.Context, *RefundPaymentEnhancedRequest) (*RefundPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundPaymentEnhanced not implemented")
}
func (UnimplementedEnhancedRefundServiceServer) GetClientInfo(context.Context, *GetClientInfoRequest) (*GetClientInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientInfo not implemented")
}
func (UnimplementedEnhancedRefundServiceServer) CreateRemotePayment(context.Context, *CreateRemotePaymentRequest) (*CreateRemotePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRemotePayment not implemented")
}
func (UnimplementedEnhancedRefundServiceServer) CancelRemotePayment(context.Context, *CancelRemotePaymentRequest) (*CancelRemotePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelRemotePayment not implemented")
}
func (UnimplementedEnhancedRefundServiceServer) mustEmbedUnimplementedEnhancedRefundServiceServer() {}
func (UnimplementedEnhancedRefundServiceServer) testEmbeddedByValue()                               {}

// UnsafeEnhancedRefundServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EnhancedRefundServiceServer will
// result in compilation errors.
type UnsafeEnhancedRefundServiceServer interface {
	mustEmbedUnimplementedEnhancedRefundServiceServer()
}

func RegisterEnhancedRefundServiceServer(s grpc.ServiceRegistrar, srv EnhancedRefundServiceServer) {
	// If the following call pancis, it indicates UnimplementedEnhancedRefundServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&EnhancedRefundService_ServiceDesc, srv)
}

func _EnhancedRefundService_RefundPaymentEnhanced_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefundPaymentEnhancedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRefundServiceServer).RefundPaymentEnhanced(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRefundService_RefundPaymentEnhanced_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRefundServiceServer).RefundPaymentEnhanced(ctx, req.(*RefundPaymentEnhancedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRefundService_GetClientInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRefundServiceServer).GetClientInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRefundService_GetClientInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRefundServiceServer).GetClientInfo(ctx, req.(*GetClientInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRefundService_CreateRemotePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRemotePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRefundServiceServer).CreateRemotePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRefundService_CreateRemotePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRefundServiceServer).CreateRemotePayment(ctx, req.(*CreateRemotePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _EnhancedRefundService_CancelRemotePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelRemotePaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EnhancedRefundServiceServer).CancelRemotePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: EnhancedRefundService_CancelRemotePayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EnhancedRefundServiceServer).CancelRemotePayment(ctx, req.(*CancelRemotePaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// EnhancedRefundService_ServiceDesc is the grpc.ServiceDesc for EnhancedRefundService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EnhancedRefundService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaspi.api.v1.EnhancedRefundService",
	HandlerType: (*EnhancedRefundServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefundPaymentEnhanced",
			Handler:    _EnhancedRefundService_RefundPaymentEnhanced_Handler,
		},
		{
			MethodName: "GetClientInfo",
			Handler:    _EnhancedRefundService_GetClientInfo_Handler,
		},
		{
			MethodName: "CreateRemotePayment",
			Handler:    _EnhancedRefundService_CreateRemotePayment_Handler,
		},
		{
			MethodName: "CancelRemotePayment",
			Handler:    _EnhancedRefundService_CancelRemotePayment_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "refund_enhanced/refund_enhanced.proto",
}
