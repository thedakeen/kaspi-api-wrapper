// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.26.1
// source: utility/utility.proto

package kaspiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UtilityService_HealthCheck_FullMethodName        = "/kaspi.api.v1.UtilityService/HealthCheck"
	UtilityService_TestScanQR_FullMethodName         = "/kaspi.api.v1.UtilityService/TestScanQR"
	UtilityService_TestConfirmPayment_FullMethodName = "/kaspi.api.v1.UtilityService/TestConfirmPayment"
	UtilityService_TestScanError_FullMethodName      = "/kaspi.api.v1.UtilityService/TestScanError"
	UtilityService_TestConfirmError_FullMethodName   = "/kaspi.api.v1.UtilityService/TestConfirmError"
)

// UtilityServiceClient is the client API for UtilityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UtilityServiceClient interface {
	HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	TestScanQR(ctx context.Context, in *TestScanQRRequest, opts ...grpc.CallOption) (*TestScanQRResponse, error)
	TestConfirmPayment(ctx context.Context, in *TestConfirmPaymentRequest, opts ...grpc.CallOption) (*TestConfirmPaymentResponse, error)
	TestScanError(ctx context.Context, in *TestScanErrorRequest, opts ...grpc.CallOption) (*TestScanErrorResponse, error)
	TestConfirmError(ctx context.Context, in *TestConfirmErrorRequest, opts ...grpc.CallOption) (*TestConfirmErrorResponse, error)
}

type utilityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUtilityServiceClient(cc grpc.ClientConnInterface) UtilityServiceClient {
	return &utilityServiceClient{cc}
}

func (c *utilityServiceClient) HealthCheck(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, UtilityService_HealthCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServiceClient) TestScanQR(ctx context.Context, in *TestScanQRRequest, opts ...grpc.CallOption) (*TestScanQRResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestScanQRResponse)
	err := c.cc.Invoke(ctx, UtilityService_TestScanQR_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServiceClient) TestConfirmPayment(ctx context.Context, in *TestConfirmPaymentRequest, opts ...grpc.CallOption) (*TestConfirmPaymentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestConfirmPaymentResponse)
	err := c.cc.Invoke(ctx, UtilityService_TestConfirmPayment_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServiceClient) TestScanError(ctx context.Context, in *TestScanErrorRequest, opts ...grpc.CallOption) (*TestScanErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestScanErrorResponse)
	err := c.cc.Invoke(ctx, UtilityService_TestScanError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *utilityServiceClient) TestConfirmError(ctx context.Context, in *TestConfirmErrorRequest, opts ...grpc.CallOption) (*TestConfirmErrorResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TestConfirmErrorResponse)
	err := c.cc.Invoke(ctx, UtilityService_TestConfirmError_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UtilityServiceServer is the server API for UtilityService service.
// All implementations must embed UnimplementedUtilityServiceServer
// for forward compatibility.
type UtilityServiceServer interface {
	HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	TestScanQR(context.Context, *TestScanQRRequest) (*TestScanQRResponse, error)
	TestConfirmPayment(context.Context, *TestConfirmPaymentRequest) (*TestConfirmPaymentResponse, error)
	TestScanError(context.Context, *TestScanErrorRequest) (*TestScanErrorResponse, error)
	TestConfirmError(context.Context, *TestConfirmErrorRequest) (*TestConfirmErrorResponse, error)
	mustEmbedUnimplementedUtilityServiceServer()
}

// UnimplementedUtilityServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUtilityServiceServer struct{}

func (UnimplementedUtilityServiceServer) HealthCheck(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedUtilityServiceServer) TestScanQR(context.Context, *TestScanQRRequest) (*TestScanQRResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestScanQR not implemented")
}
func (UnimplementedUtilityServiceServer) TestConfirmPayment(context.Context, *TestConfirmPaymentRequest) (*TestConfirmPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConfirmPayment not implemented")
}
func (UnimplementedUtilityServiceServer) TestScanError(context.Context, *TestScanErrorRequest) (*TestScanErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestScanError not implemented")
}
func (UnimplementedUtilityServiceServer) TestConfirmError(context.Context, *TestConfirmErrorRequest) (*TestConfirmErrorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestConfirmError not implemented")
}
func (UnimplementedUtilityServiceServer) mustEmbedUnimplementedUtilityServiceServer() {}
func (UnimplementedUtilityServiceServer) testEmbeddedByValue()                        {}

// UnsafeUtilityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UtilityServiceServer will
// result in compilation errors.
type UnsafeUtilityServiceServer interface {
	mustEmbedUnimplementedUtilityServiceServer()
}

func RegisterUtilityServiceServer(s grpc.ServiceRegistrar, srv UtilityServiceServer) {
	// If the following call pancis, it indicates UnimplementedUtilityServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UtilityService_ServiceDesc, srv)
}

func _UtilityService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).HealthCheck(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityService_TestScanQR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestScanQRRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).TestScanQR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_TestScanQR_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).TestScanQR(ctx, req.(*TestScanQRRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityService_TestConfirmPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConfirmPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).TestConfirmPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_TestConfirmPayment_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).TestConfirmPayment(ctx, req.(*TestConfirmPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityService_TestScanError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestScanErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).TestScanError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_TestScanError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).TestScanError(ctx, req.(*TestScanErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UtilityService_TestConfirmError_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConfirmErrorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UtilityServiceServer).TestConfirmError(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UtilityService_TestConfirmError_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UtilityServiceServer).TestConfirmError(ctx, req.(*TestConfirmErrorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UtilityService_ServiceDesc is the grpc.ServiceDesc for UtilityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UtilityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kaspi.api.v1.UtilityService",
	HandlerType: (*UtilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HealthCheck",
			Handler:    _UtilityService_HealthCheck_Handler,
		},
		{
			MethodName: "TestScanQR",
			Handler:    _UtilityService_TestScanQR_Handler,
		},
		{
			MethodName: "TestConfirmPayment",
			Handler:    _UtilityService_TestConfirmPayment_Handler,
		},
		{
			MethodName: "TestScanError",
			Handler:    _UtilityService_TestScanError_Handler,
		},
		{
			MethodName: "TestConfirmError",
			Handler:    _UtilityService_TestConfirmError_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "utility/utility.proto",
}
