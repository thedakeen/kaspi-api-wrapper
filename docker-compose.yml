version: '3.8'

services:

  mock-kaspi-api:
    image: mockserver/mockserver:latest
    container_name: mock-kaspi-api
    ports:
      - "8080:1080"
    environment:
      MOCKSERVER_INITIALIZATION_JSON_PATH: /mockserver-init.json
      MOCKSERVER_WATCH_INITIALIZATION_JSON: "true"
    volumes:
      - ./mockserver/mockserver-init.json:/mockserver-init.json
    networks:
      - kaspi-network


  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kaspi-api
    ports:
      - "8081:8081"
      - "8082:8082"
    volumes:
      - ./.env:/app/.env
    restart: unless-stopped
    depends_on:
      - db
    environment:
      - DB_HOST=kaspi-wrapper-db
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-kaspi_pay}
      - DB_SSL_MODE=${DB_SSL_MODE:-disable}
    networks:
      - kaspi-network


  db:
    image: postgres:16-alpine
    container_name: kaspi-wrapper-db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./dumps:/dumps
    environment:
      - POSTGRES_USER=${DB_USER:-postgres}
      - POSTGRES_PASSWORD=${DB_PASSWORD:-postgres}
      - POSTGRES_DB=${DB_NAME:-kaspi_pay}
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - kaspi-network

  db-tools:
    image: postgres:16-alpine
    container_name: kaspi-wrapper-db-tools
    volumes:
      - ./dumps:/dumps
      - ./scripts/db_dump.sh:/db_dump.sh
      - ./scripts/db_restore.sh:/db_restore.sh
    environment:
      - DB_HOST=kaspi-wrapper-db
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-postgres}
      - DB_NAME=${DB_NAME:-kaspi_pay}
    entrypoint: ["sh"]
    depends_on:
      - db
    profiles:
      - tools
    networks:
      - kaspi-network

networks:
  kaspi-network:
    driver: bridge

volumes:
  postgres_data:
